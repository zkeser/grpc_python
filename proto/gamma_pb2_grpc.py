# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import gamma_pb2 as gamma__pb2


class ReadingComprehensionStub(object):
    """*
    The service for getting answer(s) to a question
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FindAnswers = channel.unary_unary(
                '/wire.readingcomprehension.v1.ReadingComprehension/FindAnswers',
                request_serializer=gamma__pb2.QueryPassagePair.SerializeToString,
                response_deserializer=gamma__pb2.FoundAnswers.FromString,
                )
        self.FindAnswersForPassages = channel.unary_unary(
                '/wire.readingcomprehension.v1.ReadingComprehension/FindAnswersForPassages',
                request_serializer=gamma__pb2.QueryWithPassages.SerializeToString,
                response_deserializer=gamma__pb2.FoundAnswersForPassages.FromString,
                )
        self.StatusCheck = channel.unary_unary(
                '/wire.readingcomprehension.v1.ReadingComprehension/StatusCheck',
                request_serializer=gamma__pb2.StatusCheckRequest.SerializeToString,
                response_deserializer=gamma__pb2.Status.FromString,
                )


class ReadingComprehensionServicer(object):
    """*
    The service for getting answer(s) to a question
    """

    def FindAnswers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindAnswersForPassages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StatusCheck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReadingComprehensionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FindAnswers': grpc.unary_unary_rpc_method_handler(
                    servicer.FindAnswers,
                    request_deserializer=gamma__pb2.QueryPassagePair.FromString,
                    response_serializer=gamma__pb2.FoundAnswers.SerializeToString,
            ),
            'FindAnswersForPassages': grpc.unary_unary_rpc_method_handler(
                    servicer.FindAnswersForPassages,
                    request_deserializer=gamma__pb2.QueryWithPassages.FromString,
                    response_serializer=gamma__pb2.FoundAnswersForPassages.SerializeToString,
            ),
            'StatusCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.StatusCheck,
                    request_deserializer=gamma__pb2.StatusCheckRequest.FromString,
                    response_serializer=gamma__pb2.Status.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'wire.readingcomprehension.v1.ReadingComprehension', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ReadingComprehension(object):
    """*
    The service for getting answer(s) to a question
    """

    @staticmethod
    def FindAnswers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/wire.readingcomprehension.v1.ReadingComprehension/FindAnswers',
            gamma__pb2.QueryPassagePair.SerializeToString,
            gamma__pb2.FoundAnswers.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindAnswersForPassages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/wire.readingcomprehension.v1.ReadingComprehension/FindAnswersForPassages',
            gamma__pb2.QueryWithPassages.SerializeToString,
            gamma__pb2.FoundAnswersForPassages.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StatusCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/wire.readingcomprehension.v1.ReadingComprehension/StatusCheck',
            gamma__pb2.StatusCheckRequest.SerializeToString,
            gamma__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
